import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from io import BytesIO

# Configuration de la page
st.set_page_config(page_title="Laboratoire de M√©trologie", page_icon="üî¨", layout="wide")

# Base de donn√©es des classes d'instruments
CLASSES_DB = {
    "Classe 0.5": {"EMT": 0.5, "Resolution": 0.01, "Plage": "0-100"},
    "Classe 1.0": {"EMT": 1.0, "Resolution": 0.1, "Plage": "0-200"},
    "Classe 1.5": {"EMT": 1.5, "Resolution": 0.1, "Plage": "0-500"},
    "Classe 2.5": {"EMT": 2.5, "Resolution": 0.5, "Plage": "0-1000"},
}

# Initialisation de la session state
if 'mesures' not in st.session_state:
    st.session_state.mesures = None
if 'validated' not in st.session_state:
    st.session_state.validated = False

# Titre principal
st.title("üî¨ Bienvenue au Laboratoire de M√©trologie")
st.markdown("---")

# Sidebar - Configuration
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")
    
    # Informations sur le mesurande
    st.subheader("1. Informations Mesurande")
    mesurande = st.text_input("Nom du mesurande", "Temp√©rature", key="mesurande")
    unite = st.selectbox("Unit√©", ["¬∞C", "¬∞F", "K", "Pa", "Bar", "mm", "m"])
    
    st.subheader("2. Caract√©ristiques Instrument")
    classe = st.selectbox("Classe de l'instrument", list(CLASSES_DB.keys()))
    temperature = st.slider("Temp√©rature ambiante (¬∞C)", 15, 30, 20)
    homogeneite = st.selectbox("Homog√©n√©it√©", ["Excellente", "Bonne", "Acceptable"])
    
    # Affichage des infos de la classe s√©lectionn√©e
    st.info(f"""
    **Classe s√©lectionn√©e: {classe}**
    - EMT: ¬±{CLASSES_DB[classe]['EMT']} {unite}
    - R√©solution: {CLASSES_DB[classe]['Resolution']} {unite}
    - Plage: {CLASSES_DB[classe]['Plage']} {unite}
    """)
    
    st.subheader("3. Plan de mesure")
    nb_echantillons = st.number_input("Nombre d'√©chantillons", 1, 20, 5)
    nb_operateurs = st.number_input("Nombre d'op√©rateurs", 1, 10, 3)
    
    total_mesures = nb_echantillons * nb_operateurs
    st.success(f"**Total: {total_mesures} mesures √† effectuer**")

# Corps principal
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìù Saisie des Mesures")
    
    # Options d'import/export
    tab_input1, tab_input2, tab_input3 = st.tabs(["‚úèÔ∏è Saisie Manuelle", "üì§ Import de Donn√©es", "üé≤ Donn√©es de Test"])
    
    with tab_input1:
        # Cr√©er le tableau de saisie
        if st.button("üîÑ Initialiser le tableau de mesures", type="primary"):
            st.session_state.mesures = pd.DataFrame(
                np.nan,
                index=[f"√âchantillon {i+1}" for i in range(int(nb_echantillons))],
                columns=[f"Op√©rateur {i+1}" for i in range(int(nb_operateurs))]
            )
            st.session_state.validated = False
            st.rerun()
    
    with tab_input2:
        st.subheader("üì• Importer vos donn√©es")
        
        # Format d'import
        format_import = st.radio(
            "Choisir le format d'import",
            ["CSV", "Excel", "Texte (valeurs s√©par√©es)"],
            horizontal=True
        )
        
        if format_import == "CSV":
            uploaded_file = st.file_uploader("Charger un fichier CSV", type=['csv'])
            st.info("üí° Format attendu: Lignes=√âchantillons, Colonnes=Op√©rateurs avec en-t√™tes")
            
            if uploaded_file is not None:
                try:
                    df_import = pd.read_csv(uploaded_file, index_col=0)
                    st.success(f"‚úÖ Fichier charg√©: {df_import.shape[0]} √©chantillons √ó {df_import.shape[1]} op√©rateurs")
                    st.dataframe(df_import, use_container_width=True)
                    
                    if st.button("‚úÖ Confirmer l'import CSV"):
                        st.session_state.mesures = df_import
                        st.session_state.validated = False
                        st.success("Donn√©es import√©es avec succ√®s!")
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'import: {str(e)}")
        
        elif format_import == "Excel":
            uploaded_file = st.file_uploader("Charger un fichier Excel", type=['xlsx', 'xls'])
            st.info("üí° Format attendu: Lignes=√âchantillons, Colonnes=Op√©rateurs avec en-t√™tes")
            
            if uploaded_file is not None:
                try:
                    df_import = pd.read_excel(uploaded_file, index_col=0)
                    st.success(f"‚úÖ Fichier charg√©: {df_import.shape[0]} √©chantillons √ó {df_import.shape[1]} op√©rateurs")
                    st.dataframe(df_import, use_container_width=True)
                    
                    if st.button("‚úÖ Confirmer l'import Excel"):
                        st.session_state.mesures = df_import
                        st.session_state.validated = False
                        st.success("Donn√©es import√©es avec succ√®s!")
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'import: {str(e)}")
        
        else:  # Texte
            st.write("Coller vos donn√©es (valeurs s√©par√©es par des tabulations ou virgules)")
            text_data = st.text_area("Donn√©es", height=200, placeholder="√âchantillon1\t12.5\t12.6\t12.4\n√âchantillon2\t12.7\t12.5\t12.6")
            
            separateur = st.radio("S√©parateur", ["Tabulation", "Virgule", "Point-virgule"], horizontal=True)
            sep_map = {"Tabulation": "\t", "Virgule": ",", "Point-virgule": ";"}
            
            if text_data and st.button("‚úÖ Confirmer l'import Texte"):
                try:
                    from io import StringIO
                    df_import = pd.read_csv(StringIO(text_data), sep=sep_map[separateur], index_col=0, header=None)
                    df_import.columns = [f"Op√©rateur {i+1}" for i in range(df_import.shape[1])]
                    st.session_state.mesures = df_import
                    st.session_state.validated = False
                    st.success("Donn√©es import√©es avec succ√®s!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'import: {str(e)}")
        
        # Template de t√©l√©chargement
        st.markdown("---")
        st.subheader("üìã T√©l√©charger un mod√®le vide")
        template_df = pd.DataFrame(
            np.nan,
            index=[f"√âchantillon {i+1}" for i in range(int(nb_echantillons))],
            columns=[f"Op√©rateur {i+1}" for i in range(int(nb_operateurs))]
        )
        
        col_temp1, col_temp2 = st.columns(2)
        with col_temp1:
            csv_template = template_df.to_csv()
            st.download_button(
                "üì• Template CSV",
                csv_template,
                "template_mesures.csv",
                "text/csv"
            )
        with col_temp2:
            # Pour Excel, on utilise un buffer
            from io import BytesIO
            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                template_df.to_excel(writer, sheet_name='Mesures')
            excel_template = buffer.getvalue()
            st.download_button(
                "üì• Template Excel",
                excel_template,
                "template_mesures.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    
    with tab_input3:
        st.subheader("üé≤ Charger des Donn√©es de Test")
        st.write("Utilisez ces jeux de donn√©es pr√©d√©finis pour tester rapidement l'application")
        
        # S√©lection du type de test
        type_test = st.selectbox(
            "Choisir un sc√©nario de test",
            [
                "Mesures Excellentes (faible dispersion)",
                "Mesures Acceptables (dispersion moyenne)",
                "Mesures avec Biais Op√©rateur",
                "Mesures Non Conformes (forte dispersion)",
                "Donn√©es Personnalis√©es (5√ó3)",
                "Grandes S√©ries (10√ó5)"
            ]
        )
        
        # G√©n√©ration des donn√©es de test selon le sc√©nario
        if type_test == "Mesures Excellentes (faible dispersion)":
            test_data = pd.DataFrame({
                'Op√©rateur 1': [20.15, 25.32, 30.48, 35.62, 40.78],
                'Op√©rateur 2': [20.18, 25.35, 30.52, 35.68, 40.82],
                'Op√©rateur 3': [20.12, 25.30, 30.45, 35.60, 40.75]
            }, index=[f"√âchantillon {i+1}" for i in range(5)])
            
            st.info("‚úÖ **Sc√©nario** : Op√©rateurs tr√®s coh√©rents, √©cart-type ~0.05¬∞C")
        
        elif type_test == "Mesures Acceptables (dispersion moyenne)":
            test_data = pd.DataFrame({
                'Op√©rateur 1': [20.1, 25.3, 30.5, 35.6, 40.8],
                'Op√©rateur 2': [20.3, 25.4, 30.7, 35.8, 41.0],
                'Op√©rateur 3': [19.9, 25.2, 30.4, 35.5, 40.6]
            }, index=[f"√âchantillon {i+1}" for i in range(5)])
            
            st.info("‚ÑπÔ∏è **Sc√©nario** : Dispersion acceptable, √©cart-type ~0.15¬∞C")
        
        elif type_test == "Mesures avec Biais Op√©rateur":
            test_data = pd.DataFrame({
                'Op√©rateur 1': [20.15, 25.32, 30.48, 35.62, 40.78],
                'Op√©rateur 2': [20.45, 25.80, 31.05, 36.20, 41.35],
                'Op√©rateur 3': [19.95, 25.10, 30.20, 35.35, 40.50]
            }, index=[f"√âchantillon {i+1}" for i in range(5)])
            
            st.warning("‚ö†Ô∏è **Sc√©nario** : Op√©rateur 2 mesure syst√©matiquement plus haut (+0.5¬∞C)")
        
        elif type_test == "Mesures Non Conformes (forte dispersion)":
            test_data = pd.DataFrame({
                'Op√©rateur 1': [20.2, 25.5, 30.8, 35.9, 41.2],
                'Op√©rateur 2': [20.8, 26.2, 31.5, 36.8, 42.0],
                'Op√©rateur 3': [19.5, 24.8, 29.9, 35.0, 40.1]
            }, index=[f"√âchantillon {i+1}" for i in range(5)])
            
            st.error("‚ùå **Sc√©nario** : Forte dispersion, √©cart-type ~0.60¬∞C, non conforme")
        
        elif type_test == "Donn√©es Personnalis√©es (5√ó3)":
            test_data = pd.DataFrame({
                'Op√©rateur 1': [12.45, 15.67, 18.23, 21.89, 24.12],
                'Op√©rateur 2': [12.50, 15.70, 18.28, 21.95, 24.18],
                'Op√©rateur 3': [12.42, 15.65, 18.20, 21.85, 24.08]
            }, index=[f"√âchantillon {i+1}" for i in range(5)])
            
            st.info("üìä **Sc√©nario** : Donn√©es mixtes pour test g√©n√©ral")
        
        else:  # Grandes S√©ries
            np.random.seed(42)
            base_values = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]
            test_data = pd.DataFrame({
                f'Op√©rateur {i+1}': [val + np.random.normal(0, 0.1) for val in base_values]
                for i in range(5)
            }, index=[f"√âchantillon {i+1}" for i in range(10)])
            
            st.info("üìà **Sc√©nario** : Grande s√©rie de mesures (10 √©chantillons √ó 5 op√©rateurs)")
        
        # Affichage du tableau de test
        st.dataframe(test_data.round(3), use_container_width=True)
        
        # Statistiques rapides du jeu de test
        col_stat1, col_stat2, col_stat3 = st.columns(3)
        with col_stat1:
            st.metric("Moyenne", f"{test_data.values.mean():.3f}")
        with col_stat2:
            st.metric("√âcart-type", f"{test_data.values.std():.3f}")
        with col_stat3:
            st.metric("√âtendue", f"{(test_data.values.max() - test_data.values.min()):.3f}")
        
        # Bouton de chargement
        if st.button("‚úÖ Charger ces Donn√©es de Test", type="primary", key="load_test"):
            st.session_state.mesures = test_data
            st.session_state.validated = False
            st.success(f"‚úÖ Donn√©es de test charg√©es : {test_data.shape[0]} √©chantillons √ó {test_data.shape[1]} op√©rateurs")
            st.rerun()
    
    if st.session_state.mesures is not None:
        st.markdown("---")
        st.write(f"**Mesurande:** {mesurande} ({unite})")
        st.write(f"**Configuration:** {st.session_state.mesures.shape[0]} √©chantillons √ó {st.session_state.mesures.shape[1]} op√©rateurs")
        
        # √âditeur de donn√©es
        edited_df = st.data_editor(
            st.session_state.mesures,
            use_container_width=True,
            num_rows="fixed",
            key="data_editor"
        )
        
        # Bouton de validation
        if st.button("‚úÖ Valider les mesures", type="primary"):
            if edited_df.isna().any().any():
                st.warning("‚ö†Ô∏è Certaines cellules sont vides. Veuillez remplir toutes les mesures.")
            else:
                st.session_state.mesures = edited_df
                st.session_state.validated = True
                st.success("‚úÖ Mesures valid√©es avec succ√®s!")
                st.rerun()

with col2:
    st.header("üìä Base de Donn√©es")
    
    # Afficher la base de donn√©es compl√®te
    df_classes = pd.DataFrame(CLASSES_DB).T
    st.dataframe(df_classes, use_container_width=True)
    
    st.info("üí° **Info:** EMT = Erreur Maximale Tol√©r√©e")

# Section des r√©sultats
if st.session_state.validated and st.session_state.mesures is not None:
    st.markdown("---")
    st.header("üìà R√©sultats et Analyses")
    
    df = st.session_state.mesures
    
    # Calculs statistiques
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Moyenne g√©n√©rale", f"{df.values.mean():.3f} {unite}")
        st.metric("√âcart-type g√©n√©ral", f"{df.values.std():.3f} {unite}")
    
    with col2:
        st.metric("Valeur minimale", f"{df.values.min():.3f} {unite}")
        st.metric("Valeur maximale", f"{df.values.max():.3f} {unite}")
    
    with col3:
        etendue = df.values.max() - df.values.min()
        st.metric("√âtendue", f"{etendue:.3f} {unite}")
        cv = (df.values.std() / df.values.mean() * 100) if df.values.mean() != 0 else 0
        st.metric("Coeff. Variation", f"{cv:.2f} %")
    
    # Analyses d√©taill√©es
    tab1, tab2, tab3 = st.tabs(["üìä Par √âchantillon", "üë• Par Op√©rateur", "üìã Tableau Complet"])
    
    with tab1:
        st.subheader("Statistiques par √©chantillon")
        stats_echantillons = pd.DataFrame({
            'Moyenne': df.mean(axis=1),
            '√âcart-type': df.std(axis=1),
            'Min': df.min(axis=1),
            'Max': df.max(axis=1),
            '√âtendue': df.max(axis=1) - df.min(axis=1)
        })
        st.dataframe(stats_echantillons.round(3), use_container_width=True)
    
    with tab2:
        st.subheader("Statistiques par op√©rateur")
        stats_operateurs = pd.DataFrame({
            'Moyenne': df.mean(axis=0),
            '√âcart-type': df.std(axis=0),
            'Min': df.min(axis=0),
            'Max': df.max(axis=0),
            '√âtendue': df.max(axis=0) - df.min(axis=0)
        })
        st.dataframe(stats_operateurs.round(3), use_container_width=True)
    
    with tab3:
        st.subheader("Tableau complet des mesures")
        st.dataframe(df.round(3), use_container_width=True)
    
    # Analyse de conformit√©
    st.markdown("---")
    st.subheader("üéØ Analyse de Conformit√©")
    
    emt = CLASSES_DB[classe]['EMT']
    ecart_type = df.values.std()
    
    col1, col2 = st.columns(2)
    
    with col1:
        if ecart_type <= emt / 3:
            st.success(f"‚úÖ **Excellent:** √âcart-type ({ecart_type:.3f}) << EMT/3 ({emt/3:.3f})")
        elif ecart_type <= emt / 2:
            st.info(f"‚ÑπÔ∏è **Acceptable:** √âcart-type ({ecart_type:.3f}) < EMT/2 ({emt/2:.3f})")
        else:
            st.error(f"‚ùå **Non conforme:** √âcart-type ({ecart_type:.3f}) > EMT/2 ({emt/2:.3f})")
    
    with col2:
        st.write(f"**Param√®tres de r√©f√©rence:**")
        st.write(f"- EMT: ¬±{emt} {unite}")
        st.write(f"- R√©solution: {CLASSES_DB[classe]['Resolution']} {unite}")
        st.write(f"- Temp√©rature: {temperature}¬∞C")
        st.write(f"- Homog√©n√©it√©: {homogeneite}")
    
    # Bouton d'export
    st.markdown("---")
    col_export1, col_export2, col_export3 = st.columns(3)
    
    with col_export1:
        # Export rapport texte
        rapport = f"""
RAPPORT DE M√âTROLOGIE
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
=====================================

CONFIGURATION
- Mesurande: {mesurande} ({unite})
- Classe: {classe}
- EMT: ¬±{emt} {unite}
- Temp√©rature: {temperature}¬∞C
- Homog√©n√©it√©: {homogeneite}

PLAN DE MESURE
- √âchantillons: {df.shape[0]}
- Op√©rateurs: {df.shape[1]}
- Total mesures: {df.shape[0] * df.shape[1]}

R√âSULTATS
- Moyenne: {df.values.mean():.3f} {unite}
- √âcart-type: {df.values.std():.3f} {unite}
- Min: {df.values.min():.3f} {unite}
- Max: {df.values.max():.3f} {unite}
- √âtendue: {etendue:.3f} {unite}
        """
        st.download_button(
            label="üì• Rapport TXT",
            data=rapport,
            file_name=f"rapport_metrologie_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )
    
    with col_export2:
        # Export CSV
        csv_export = df.to_csv()
        st.download_button(
            label="üì• Export CSV",
            data=csv_export,
            file_name=f"mesures_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    
    with col_export3:
        # Export Excel avec statistiques
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='Mesures')
            stats_echantillons.to_excel(writer, sheet_name='Stats_√âchantillons')
            stats_operateurs.to_excel(writer, sheet_name='Stats_Op√©rateurs')
        excel_export = buffer.getvalue()
        st.download_button(
            label="üì• Export Excel",
            data=excel_export,
            file_name=f"mesures_completes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <small> Laboratoire de Mesures et √âtalonnage</small>
</div>
""", unsafe_allow_html=True)